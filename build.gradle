/*
 * Copyright 2019-2025 Seth Falco and Commandler Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "io.spring.dependency-management" version "1.0.10.RELEASE" apply false
}

allprojects() {
    apply plugin: "checkstyle"
    apply plugin: "jacoco-report-aggregation"
    apply plugin: "application"

    group = "fun.falco.commandler"
    version = "4.1.0"
    description = " Commandler is a command handling framework for Java."

    ext {
        deltaSpikeVersion = "1.9.4"
        validationVersion = "2.0.2"
    }

    repositories {
        mavenCentral()

        // Local system
        mavenLocal()
    }

    jacoco {
        toolVersion = "0.8.8"
    }
}

subprojects() {
    apply plugin: "java-library"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 17
    targetCompatibility = 17

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    dependencyManagement {
        imports {
            mavenBom "org.apache.deltaspike.distribution:distributions-bom:${deltaSpikeVersion}"
        }
    }

    sourceSets {
        main {
            output.resourcesDir = output.classesDirs.singleFile
        }

        test {
            output.resourcesDir = output.classesDirs.singleFile
        }
    }

    dependencies {
        // Logging
        implementation("org.slf4j:slf4j-api:1.7.31")
        testRuntimeOnly("ch.qos.logback:logback-classic:1.2.3")

        // Testing
        testImplementation("org.junit.jupiter:junit-jupiter:5.7.2")
    }

    /** Testing */
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport

        reports {
            html.required = false
        }
    }

    /** Code Coverage */
    jacocoTestReport {
        reports {
            html.required = false
            xml.required = false
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}
